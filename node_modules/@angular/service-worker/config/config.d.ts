/**
 * @license Angular v9.1.1
 * (c) 2010-2020 Google LLC. https://angular.io/
 * License: MIT
 */


/**
 * Configuration for a particular group of assets.
 *
 * @publicApi
 */
export declare interface AssetGroup {
    name: string;
    installMode?: 'prefetch' | 'lazy';
    updateMode?: 'prefetch' | 'lazy';
    resources: {
        files?: Glob[];
        urls?: Glob[];
    };
}

/**
 * A top-level Angular Service Worker configuration object.
 *
 * @publicApi
 */
export declare interface Config {
    appData?: {};
    index: string;
    assetGroups?: AssetGroup[];
    dataGroups?: DataGroup[];
    navigationUrls?: string[];
}

/**
 * Configuration for a particular group of dynamic URLs.
 *
 * @publicApi
 */
export declare interface DataGroup {
    name: string;
    urls: Glob[];
    version?: number;
    cacheConfig: {
        maxSize: number;
        maxAge: Duration;
        timeout?: Duration;
        strategy?: 'freshness' | 'performance';
    };
}

/**
 * @publicApi
 */
export declare type Duration = string;


/**
 * An abstraction over a virtual file system used to enable testing and operation
 * of the config generator in different environments.
 *
 * @publicApi
 */
export declare interface Filesystem {
    list(dir: string): Promise<string[]>;
    read(file: string): Promise<string>;
    hash(file: string): Promise<string>;
    write(file: string, contents: string): Promise<void>;
}

/**
 * Consumes service worker configuration files and processes them into control files.
 *
 * @publicApi
 */
export declare class Generator {
    readonly fs: Filesystem;
    private baseHref;
    constructor(fs: Filesystem, baseHref: string);
    process(config: Config): Promise<Object>;
    private processAssetGroups;
    private processDataGroups;
}


/**
 * @publicApi
 */
export declare type Glob = string;

export { }

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmQudHMiLCJzb3VyY2VzIjpbImNvbmZpZy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFyIHY5LjEuMVxuICogKGMpIDIwMTAtMjAyMCBHb29nbGUgTExDLiBodHRwczovL2FuZ3VsYXIuaW8vXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuXG5cclxuLyoqXHJcbiAqIENvbmZpZ3VyYXRpb24gZm9yIGEgcGFydGljdWxhciBncm91cCBvZiBhc3NldHMuXHJcbiAqXHJcbiAqIEBwdWJsaWNBcGlcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBBc3NldEdyb3VwIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIGluc3RhbGxNb2RlPzogJ3ByZWZldGNoJyB8ICdsYXp5JztcclxuICAgIHVwZGF0ZU1vZGU/OiAncHJlZmV0Y2gnIHwgJ2xhenknO1xyXG4gICAgcmVzb3VyY2VzOiB7XHJcbiAgICAgICAgZmlsZXM/OiBHbG9iW107XHJcbiAgICAgICAgdXJscz86IEdsb2JbXTtcclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIHRvcC1sZXZlbCBBbmd1bGFyIFNlcnZpY2UgV29ya2VyIGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxyXG4gKlxyXG4gKiBAcHVibGljQXBpXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgQ29uZmlnIHtcclxuICAgIGFwcERhdGE/OiB7fTtcclxuICAgIGluZGV4OiBzdHJpbmc7XHJcbiAgICBhc3NldEdyb3Vwcz86IEFzc2V0R3JvdXBbXTtcclxuICAgIGRhdGFHcm91cHM/OiBEYXRhR3JvdXBbXTtcclxuICAgIG5hdmlnYXRpb25VcmxzPzogc3RyaW5nW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb25maWd1cmF0aW9uIGZvciBhIHBhcnRpY3VsYXIgZ3JvdXAgb2YgZHluYW1pYyBVUkxzLlxyXG4gKlxyXG4gKiBAcHVibGljQXBpXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRGF0YUdyb3VwIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHVybHM6IEdsb2JbXTtcclxuICAgIHZlcnNpb24/OiBudW1iZXI7XHJcbiAgICBjYWNoZUNvbmZpZzoge1xyXG4gICAgICAgIG1heFNpemU6IG51bWJlcjtcclxuICAgICAgICBtYXhBZ2U6IER1cmF0aW9uO1xyXG4gICAgICAgIHRpbWVvdXQ/OiBEdXJhdGlvbjtcclxuICAgICAgICBzdHJhdGVneT86ICdmcmVzaG5lc3MnIHwgJ3BlcmZvcm1hbmNlJztcclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcHVibGljQXBpXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSB0eXBlIER1cmF0aW9uID0gc3RyaW5nO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBBbiBhYnN0cmFjdGlvbiBvdmVyIGEgdmlydHVhbCBmaWxlIHN5c3RlbSB1c2VkIHRvIGVuYWJsZSB0ZXN0aW5nIGFuZCBvcGVyYXRpb25cclxuICogb2YgdGhlIGNvbmZpZyBnZW5lcmF0b3IgaW4gZGlmZmVyZW50IGVudmlyb25tZW50cy5cclxuICpcclxuICogQHB1YmxpY0FwaVxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIEZpbGVzeXN0ZW0ge1xyXG4gICAgbGlzdChkaXI6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+O1xyXG4gICAgcmVhZChmaWxlOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz47XHJcbiAgICBoYXNoKGZpbGU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPjtcclxuICAgIHdyaXRlKGZpbGU6IHN0cmluZywgY29udGVudHM6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb25zdW1lcyBzZXJ2aWNlIHdvcmtlciBjb25maWd1cmF0aW9uIGZpbGVzIGFuZCBwcm9jZXNzZXMgdGhlbSBpbnRvIGNvbnRyb2wgZmlsZXMuXHJcbiAqXHJcbiAqIEBwdWJsaWNBcGlcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdlbmVyYXRvciB7XHJcbiAgICByZWFkb25seSBmczogRmlsZXN5c3RlbTtcclxuICAgIHByaXZhdGUgYmFzZUhyZWY7XHJcbiAgICBjb25zdHJ1Y3RvcihmczogRmlsZXN5c3RlbSwgYmFzZUhyZWY6IHN0cmluZyk7XHJcbiAgICBwcm9jZXNzKGNvbmZpZzogQ29uZmlnKTogUHJvbWlzZTxPYmplY3Q+O1xyXG4gICAgcHJpdmF0ZSBwcm9jZXNzQXNzZXRHcm91cHM7XHJcbiAgICBwcml2YXRlIHByb2Nlc3NEYXRhR3JvdXBzO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwdWJsaWNBcGlcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgR2xvYiA9IHN0cmluZztcclxuXHJcbmV4cG9ydCB7IH1cclxuIl19